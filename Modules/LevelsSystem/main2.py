import discord
from discord.ext import commands
from discordLevelingSystem import DiscordLevelingSystem, LevelUpAnnouncement, RoleAward
from PIL import Image, ImageDraw, ImageFont
import io
import os
from typing import Optional

class LevelingSystemCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
        self.leveling = DiscordLevelingSystem(
            rate=1,
            per=60,
            database_file_path="Saves/LevelsSystem/DiscordLevelingSystem.db",
            awards= { 1310050065683058829 : [
                    RoleAward(level_requirement=5, role_id=1373199249139040286),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID —Ä–æ–ª–µ–π
                    RoleAward(level_requirement=10, role_id=1373199294567546880),
                    RoleAward(level_requirement=15, role_id=1373199337265430661)
                ]}
            
        )
    
    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author.bot:
            return
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç
        await self.leveling.award_xp(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        user_data = await self.leveling.get_user_data(message.author)
        if user_data.has_level_up:
            channel = message.channel
            await channel.send(
                f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {message.author.mention}! –¢—ã –¥–æ—Å—Ç–∏–≥ {user_data.level} —É—Ä–æ–≤–Ω—è!'
            )
    
    @commands.command(name='rank', aliases=['level', '–ø—Ä–æ—Ñ–∏–ª—å', '—É—Ä–æ–≤–µ–Ω—å'])
    async def rank(self, ctx, member: Optional[discord.Member] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è —Å —É—Ä–æ–≤–Ω–µ–º"""
        member = member or ctx.author
        user_data = await self.leveling.get_user_data(member)
        
        image = await self._generate_profile_card(member, user_data)
        
        with io.BytesIO() as image_binary:
            image.save(image_binary, 'PNG')
            image_binary.seek(0)
            await ctx.send(file=discord.File(image_binary, f'{member.name}_profile.png'))
    
    async def _generate_profile_card(self, member, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (800, 300), color=(54, 57, 63))
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä
        avatar_asset = member.avatar.with_size(256)
        avatar_data = await avatar_asset.read()
        avatar = Image.open(io.BytesIO(avatar_data)).resize((200, 200))
        
        # –ö—Ä—É–≥–ª–∞—è –º–∞—Å–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        mask = Image.new('L', (200, 200), 0)
        draw_mask = ImageDraw.Draw(mask)
        draw_mask.ellipse((0, 0, 200, 200), fill=255)
        img.paste(avatar, (50, 50), mask)
        
        # –®—Ä–∏—Ñ—Ç—ã
        try:
            title_font = ImageFont.truetype("arial.ttf", 40)
            normal_font = ImageFont.truetype("arial.ttf", 30)
        except:
            title_font = ImageFont.load_default()
            normal_font = ImageFont.load_default()
        
        # –¢–µ–∫—Å—Ç
        draw.text((270, 50), str(member), font=title_font, fill=(255, 255, 255))
        draw.text((270, 120), f"–£—Ä–æ–≤–µ–Ω—å: {user_data.level}", font=normal_font, fill=(255, 255, 255))
        draw.text((270, 160), f"–û–ø—ã—Ç: {user_data.xp}/{user_data.next_level_xp}", font=normal_font, fill=(255, 255, 255))
        draw.text((270, 200), f"–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: #{await self._get_user_rank(member)}", font=normal_font, fill=(255, 255, 255))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress = user_data.xp / user_data.next_level_xp
        bar_width = 400 * progress
        draw.rectangle([270, 250, 270 + bar_width, 270], fill=(114, 137, 218))
        draw.rectangle([270, 250, 670, 270], outline=(255, 255, 255), width=2)
        
        return img
    
    async def _get_user_rank(self, member):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–ø–µ"""
        leaderboard = await self.leveling.get_leaderboard(member.guild)
        user_ids = [user.user_id for user in leaderboard]
        return user_ids.index(member.id) + 1 if member.id in user_ids else len(user_ids) + 1
    
    @commands.command(name='leaderboard', aliases=['—Ç–æ–ø', 'top'])
    async def leaderboard(self, ctx):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        top_users = await self.leveling.get_leaderboard(ctx.guild)
        
        embed = discord.Embed(
            title="üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞",
            color=discord.Color.gold()
        )
        
        for index, user_data in enumerate(top_users[:10], start=1):
            member = ctx.guild.get_member(user_data.user_id)
            if member:
                embed.add_field(
                    name=f"{index}. {member.display_name}",
                    value=f"–£—Ä–æ–≤–µ–Ω—å: {user_data.level} | –û–ø—ã—Ç: {user_data.total_xp}",
                    inline=False
                )
        
        embed.set_footer(text=f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {ctx.prefix}rank —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å")
        await ctx.send(embed=embed)
    
    @commands.command(name='set-level', aliases=['—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å-—É—Ä–æ–≤–µ–Ω—å'])
    @commands.has_permissions(administrator=True)
    async def set_level(self, ctx, member: discord.Member, level: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if level < 1:
            return await ctx.send("–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
        
        await self.leveling.set_level(member, level)
        await ctx.send(f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}")

def setup(bot):
    bot.add_cog(LevelingSystemCog(bot))
